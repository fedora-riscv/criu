From 8e1769318b436a69a67e399e432cc0436abf4298 Mon Sep 17 00:00:00 2001
From: Pavel Tikhomirov <ptikhomirov@virtuozzo.com>
Date: Mon, 16 Sep 2019 18:07:32 +0300
Subject: [PATCH 158/249] mount: mark mounts of external devices external

Previously only autodetected and mountpoint external mounts had
mount_info->external field set, let's fix this injustice so that we can
operate all external mounts in a similar manner.

Also:

Print info message when device external mount is detected similar to
mountpoint external mounts detection.

Add helper mnt_is_nodev_external to let do_mount_one, can_mount_now and
do_bind_mount handle device external mounts separately as it was before.

Handle device external mount right in get_mp_root to set ->external on
restore. (note: calling ext_mount_lookup is only meaningfull for
mountpoint external mounts)

Add helper mnt_is_dev_external to use in resolve_source to make it more
clear that it is a device external mount restore path.

All other "if (mi->external)" checks now also handle device external
mounts, but they all look safe to do so and could've done it initially,
here is a list: fusectl_dump, mnt_is_external, dump_one_mountpoint,
propagate_mount.

Cherry-picked from Virtuozzo criu:
https://src.openvz.org/projects/OVZ/repos/criu/commits/afd899539

Changes: cleanup commit message, add some helpers.

Signed-off-by: Pavel Tikhomirov <ptikhomirov@virtuozzo.com>
---
 criu/include/mount.h | 19 +++++++++++++++++++
 criu/mount.c         | 42 ++++++++++++++++++++++++++----------------
 2 files changed, 45 insertions(+), 16 deletions(-)

diff --git a/criu/include/mount.h b/criu/include/mount.h
index f180fe58d..b49b55f3f 100644
--- a/criu/include/mount.h
+++ b/criu/include/mount.h
@@ -93,6 +93,25 @@ extern struct mount_info *mntinfo;
 
 extern void mntinfo_add_list_before(struct mount_info **head, struct mount_info *new);
 
+/*
+ * Put a : in here since those are invalid on
+ * the cli, so we know it's autogenerated in
+ * debugging.
+ */
+#define AUTODETECTED_MOUNT "CRIU:AUTOGENERATED"
+#define EXTERNAL_DEV_MOUNT "CRIU:EXTERNAL_DEV"
+#define NO_ROOT_MOUNT	   "CRIU:NO_ROOT"
+
+static inline bool mnt_is_dev_external(struct mount_info *mi)
+{
+	return mi->external && !strcmp(mi->external, EXTERNAL_DEV_MOUNT);
+}
+
+static inline bool mnt_is_nodev_external(struct mount_info *mi)
+{
+	return mi->external && strcmp(mi->external, EXTERNAL_DEV_MOUNT);
+}
+
 extern struct ns_desc mnt_ns_desc;
 #ifdef CONFIG_BINFMT_MISC_VIRTUALIZED
 extern int collect_binfmt_misc(void);
diff --git a/criu/mount.c b/criu/mount.c
index 7c42c1fc9..9fea5f395 100644
--- a/criu/mount.c
+++ b/criu/mount.c
@@ -31,14 +31,7 @@
 
 #include "images/mnt.pb-c.h"
 
-/*
- * Put a : in here since those are invalid on
- * the cli, so we know it's autogenerated in
- * debugging.
- */
-#define AUTODETECTED_MOUNT "CRIU:AUTOGENERATED"
-#define NO_ROOT_MOUNT	   "CRIU:NO_ROOT"
-#define MS_PROPAGATE	   (MS_SHARED | MS_PRIVATE | MS_UNBINDABLE | MS_SLAVE)
+#define MS_PROPAGATE (MS_SHARED | MS_PRIVATE | MS_UNBINDABLE | MS_SLAVE)
 
 #undef LOG_PREFIX
 #define LOG_PREFIX "mnt: "
@@ -484,6 +477,9 @@ static int try_resolve_ext_mount(struct mount_info *info)
 			char *source;
 			int len;
 
+			pr_info("Found %s dev-mapping for %s(%d) mountpoint\n", val, info->ns_mountpoint, info->mnt_id);
+			info->external = EXTERNAL_DEV_MOUNT;
+
 			len = strlen(val) + sizeof("dev[]");
 			source = xrealloc(info->source, len);
 			if (source == NULL)
@@ -1827,7 +1823,11 @@ static char *resolve_source(struct mount_info *mi)
 		 */
 		return mi->source;
 
-	if (mi->fstype->code == FSTYPE__AUTO) {
+	/*
+	 * FSTYPE__AUTO check is a fallback for old images which do not have
+	 * explicit EXTERNAL_DEV_MOUNT mark, but still have "dev[key]" in source.
+	 */
+	if (mnt_is_dev_external(mi) || mi->fstype->code == FSTYPE__AUTO) {
 		struct stat st;
 		char *val;
 
@@ -2217,7 +2217,7 @@ static int do_bind_mount(struct mount_info *mi)
 		goto out;
 	}
 
-	if (mi->external) {
+	if (mnt_is_nodev_external(mi)) {
 		/*
 		 * We have / pointing to criu's ns root still,
 		 * so just use the mapping's path. The mountpoint
@@ -2376,7 +2376,7 @@ static bool can_mount_now(struct mount_info *mi)
 	/* Parent should be mounted already, that's how mnt_tree_for_each works */
 	BUG_ON(mi->parent && !mi->parent->mounted);
 
-	if (mi->external)
+	if (mnt_is_nodev_external(mi))
 		goto shared;
 
 	/*
@@ -2551,10 +2551,11 @@ static int do_mount_one(struct mount_info *mi)
 			return -1;
 		mi->mounted = true;
 		ret = 0;
-	} else if (!mi->bind && !mi->need_plugin && !mi->external)
+	} else if (!mi->bind && !mi->need_plugin && !mnt_is_nodev_external(mi)) {
 		ret = do_new_mount(mi);
-	else
+	} else {
 		ret = do_bind_mount(mi);
+	}
 
 	if (ret == 0 && fetch_rt_stat(mi, mi->mountpoint))
 		return -1;
@@ -2882,10 +2883,11 @@ static int get_mp_root(MntEntry *me, struct mount_info *mi)
 	 * from the command line and put into root's place
 	 */
 
-	ext = ext_mount_lookup(me->ext_key);
-	if (!ext) {
+	if (!strcmp(me->ext_key, AUTODETECTED_MOUNT)) {
 		if (!opts.autodetect_ext_mounts) {
-			pr_err("No mapping for %s mountpoint\n", me->mountpoint);
+			pr_err("Mount %d:%s is autodetected external mount. "
+			       "Try \"--ext-mount-map auto\" to allow them.\n",
+			       mi->mnt_id, mi->mountpoint);
 			return -1;
 		}
 
@@ -2899,6 +2901,14 @@ static int get_mp_root(MntEntry *me, struct mount_info *mi)
 		 */
 
 		ext = mi->source;
+	} else if (!strcmp(me->ext_key, EXTERNAL_DEV_MOUNT)) {
+		ext = EXTERNAL_DEV_MOUNT;
+	} else {
+		ext = ext_mount_lookup(me->ext_key);
+		if (!ext) {
+			pr_err("No mapping for %d:%s mountpoint\n", mi->mnt_id, mi->mountpoint);
+			return -1;
+		}
 	}
 
 	mi->external = ext;
-- 
2.35.1

