From a50e588c378ebe862e79a17609f1023be06324b0 Mon Sep 17 00:00:00 2001
From: Pavel Tikhomirov <ptikhomirov@virtuozzo.com>
Date: Thu, 14 May 2020 16:36:57 +0300
Subject: [PATCH 202/245] files-reg: teach clean_one_remap to work with
 mount-v2

While mounts-v2 mounts all mounts plain without tree in service mntns we can't
just use path relative to mntns to find remap. Make it mount related, it is
also compatible with mounts-v1.

Also we don't need openat and unlinkat here as we've opened rmntns_root
just before that, lets switch to "non-at" variants.

Cherry-picked from Virtuozzo criu:
https://src.openvz.org/projects/OVZ/repos/criu/commits/dc9ac0c80

Changes: rework to skip vz-specific hunks.

Signed-off-by: Pavel Tikhomirov <ptikhomirov@virtuozzo.com>
---
 criu/files-reg.c | 46 ++++++++++++++++++++++++++--------------------
 1 file changed, 26 insertions(+), 20 deletions(-)

diff --git a/criu/files-reg.c b/criu/files-reg.c
index 66e2c2c39..636853ac8 100644
--- a/criu/files-reg.c
+++ b/criu/files-reg.c
@@ -748,44 +748,50 @@ int prepare_remaps(void)
 static int clean_one_remap(struct remap_info *ri)
 {
 	struct file_remap *remap = ri->rfi->remap;
-	int mnt_id, ret, rmntns_root;
+	int mnt_id, ret;
 	struct mount_info *mi;
-	char path[PATH_MAX];
+	char path[PATH_MAX], *rel_path;
 
 	if (remap->rpath[0] == 0)
 		return 0;
 
+	if (!(root_ns_mask & CLONE_NEWNS)) {
+		snprintf(path, sizeof(path), "/%s", remap->rpath);
+		goto nomntns;
+	}
+
 	mnt_id = ri->rfi->rfe->mnt_id; /* rirfirfe %) */
-	ret = rst_get_mnt_root(mnt_id, path, sizeof(path));
-	if (ret < 0)
-		return -1;
-	if (ret >= sizeof(path) - 1) {
-		pr_err("The path buffer is too small\n");
+	mi = lookup_mnt_id(mnt_id);
+	if (!mi) {
+		pr_err("The %d mount is not found for ghost\n", mnt_id);
 		return -1;
 	}
 
-	rmntns_root = open(path, O_RDONLY);
-	if (rmntns_root < 0) {
-		pr_perror("Unable to open %s", path);
+	rel_path = get_relative_path(remap->rpath, mi->ns_mountpoint);
+	if (!rel_path) {
+		pr_err("Can't get path %s relative to %s\n", remap->rpath, mi->ns_mountpoint);
 		return -1;
 	}
 
-	mi = lookup_mnt_id(mnt_id);
+	snprintf(path, sizeof(path), "%s%s%s", service_mountpoint(mi), strlen(rel_path) ? "/" : "", rel_path);
+
 	/* We get here while in service mntns */
-	if (mi && try_remount_writable(mi, false)) {
-		close(rmntns_root);
+	if (try_remount_writable(mi, false))
 		return -1;
-	}
 
-	pr_info("Unlink remap %s\n", remap->rpath);
+nomntns:
+	pr_info("Unlink remap %s\n", path);
 
-	ret = unlinkat(rmntns_root, remap->rpath, remap->is_dir ? AT_REMOVEDIR : 0);
-	if (ret < 0) {
-		close(rmntns_root);
-		pr_perror("Couldn't unlink remap %s %s", path, remap->rpath);
+	if (remap->is_dir)
+		ret = rmdir(path);
+	else
+		ret = unlink(path);
+
+	if (ret) {
+		pr_perror("Couldn't unlink remap %s", path);
 		return -1;
 	}
-	close(rmntns_root);
+
 	remap->rpath[0] = 0;
 
 	return 0;
-- 
2.35.1

