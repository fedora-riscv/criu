From d48d4f9e3b5c08028a07e8a77f01cf419db530ec Mon Sep 17 00:00:00 2001
From: Pavel Tikhomirov <ptikhomirov@virtuozzo.com>
Date: Thu, 25 Mar 2021 13:37:55 +0300
Subject: [PATCH 203/245] kerndat: Check for MOVE_MOUNT_SET_GROUP availability

Mounts-v2 requires new kernel feature MOVE_MOUNT_SET_GROUP to be able to
restore propagation between mounts right.

Cherry-picked from Virtuozzo criu:
https://src.openvz.org/projects/OVZ/repos/criu/commits/7da7f9a17

Changes: define move_mount syscall, check mainstream kernel
MOVE_MOUNT_SET_GROUP feature, use our "linux/mount.h" to overcome
possible problems of non-existing header on older kernels.

v3: coverity CID 389201: check ret of umount2 and rmdir at cleanup stage

Signed-off-by: Pavel Tikhomirov <ptikhomirov@virtuozzo.com>
---
 .../arch/arm/plugins/std/syscalls/syscall.def |  1 +
 .../mips/plugins/std/syscalls/syscall_64.tbl  |  1 +
 .../plugins/std/syscalls/syscall-ppc64.tbl    |  1 +
 .../plugins/std/syscalls/syscall-s390.tbl     |  1 +
 .../x86/plugins/std/syscalls/syscall_32.tbl   |  1 +
 .../x86/plugins/std/syscalls/syscall_64.tbl   |  1 +
 criu/cr-check.c                               | 10 +++
 criu/include/kerndat.h                        |  1 +
 criu/include/mount-v2.h                       | 24 +++++++
 criu/kerndat.c                                | 69 +++++++++++++++++++
 10 files changed, 110 insertions(+)
 create mode 100644 criu/include/mount-v2.h

diff --git a/compel/arch/arm/plugins/std/syscalls/syscall.def b/compel/arch/arm/plugins/std/syscalls/syscall.def
index e6508ed9f..6b9cd8b8e 100644
--- a/compel/arch/arm/plugins/std/syscalls/syscall.def
+++ b/compel/arch/arm/plugins/std/syscalls/syscall.def
@@ -112,6 +112,7 @@ userfaultfd			282	388	(int flags)
 fallocate			47	352	(int fd, int mode, loff_t offset, loff_t len)
 cacheflush			!	983042	(void *start, void *end, int flags)
 ppoll				73	336	(struct pollfd *fds, unsigned int nfds, const struct timespec *tmo, const sigset_t *sigmask, size_t sigsetsize)
+move_mount			429	429	(int from_dfd, const char *from_pathname, int to_dfd, const char *to_pathname, int flags)
 fsopen				430	430	(char *fsname, unsigned int flags)
 fsconfig			431	431	(int fd, unsigned int cmd, const char *key, const char *value, int aux)
 fsmount				432	432	(int fd, unsigned int flags, unsigned int attr_flags)
diff --git a/compel/arch/mips/plugins/std/syscalls/syscall_64.tbl b/compel/arch/mips/plugins/std/syscalls/syscall_64.tbl
index 7a6db192c..430df1824 100644
--- a/compel/arch/mips/plugins/std/syscalls/syscall_64.tbl
+++ b/compel/arch/mips/plugins/std/syscalls/syscall_64.tbl
@@ -109,6 +109,7 @@ __NR_memfd_create		5314		sys_memfd_create	(const char *name, unsigned int flags)
 __NR_userfaultfd		5317		sys_userfaultfd		(int flags)
 
 ##TODO for kernel
+__NR_move_mount			5429		sys_move_mount		(int from_dfd, const char *from_pathname, int to_dfd, const char *to_pathname, int flags)
 __NR_fsopen			5430		sys_fsopen		(char *fsname, unsigned int flags)
 __NR_fsconfig			5431		sys_fsconfig		(int fd, unsigned int cmd, const char *key, const char *value, int aux)
 __NR_fsmount			5432		sys_fsmount		(int fd, unsigned int flags, unsigned int attr_flags)
diff --git a/compel/arch/ppc64/plugins/std/syscalls/syscall-ppc64.tbl b/compel/arch/ppc64/plugins/std/syscalls/syscall-ppc64.tbl
index 1bb626bc5..138eec2af 100644
--- a/compel/arch/ppc64/plugins/std/syscalls/syscall-ppc64.tbl
+++ b/compel/arch/ppc64/plugins/std/syscalls/syscall-ppc64.tbl
@@ -108,6 +108,7 @@ __NR_gettimeofday	78		sys_gettimeofday	(struct timeval *tv, struct timezone *tz)
 __NR_preadv		320		sys_preadv_raw		(int fd, struct iovec *iov, unsigned long nr, unsigned long pos_l, unsigned long pos_h)
 __NR_userfaultfd	364		sys_userfaultfd		(int flags)
 __NR_ppoll		281		sys_ppoll		(struct pollfd *fds, unsigned int nfds, const struct timespec *tmo, const sigset_t *sigmask, size_t sigsetsize)
+__NR_move_mount		429		sys_move_mount		(int from_dfd, const char *from_pathname, int to_dfd, const char *to_pathname, int flags)
 __NR_fsopen		430		sys_fsopen		(char *fsname, unsigned int flags)
 __NR_fsconfig		431		sys_fsconfig		(int fd, unsigned int cmd, const char *key, const char *value, int aux)
 __NR_fsmount		432		sys_fsmount		(int fd, unsigned int flags, unsigned int attr_flags)
diff --git a/compel/arch/s390/plugins/std/syscalls/syscall-s390.tbl b/compel/arch/s390/plugins/std/syscalls/syscall-s390.tbl
index 7178bf483..ae54afa17 100644
--- a/compel/arch/s390/plugins/std/syscalls/syscall-s390.tbl
+++ b/compel/arch/s390/plugins/std/syscalls/syscall-s390.tbl
@@ -108,6 +108,7 @@ __NR_userfaultfd	355		sys_userfaultfd		(int flags)
 __NR_preadv		328		sys_preadv_raw		(int fd, struct iovec *iov, unsigned long nr, unsigned long pos_l, unsigned long pos_h)
 __NR_gettimeofday	78		sys_gettimeofday	(struct timeval *tv, struct timezone *tz)
 __NR_ppoll		302		sys_ppoll		(struct pollfd *fds, unsigned int nfds, const struct timespec *tmo, const sigset_t *sigmask, size_t sigsetsize)
+__NR_move_mount		429		sys_move_mount		(int from_dfd, const char *from_pathname, int to_dfd, const char *to_pathname, int flags)
 __NR_fsopen		430		sys_fsopen		(char *fsname, unsigned int flags)
 __NR_fsconfig		431		sys_fsconfig		(int fd, unsigned int cmd, const char *key, const char *value, int aux)
 __NR_fsmount		432		sys_fsmount		(int fd, unsigned int flags, unsigned int attr_flags)
diff --git a/compel/arch/x86/plugins/std/syscalls/syscall_32.tbl b/compel/arch/x86/plugins/std/syscalls/syscall_32.tbl
index 7e456cdb7..e4133f8f9 100644
--- a/compel/arch/x86/plugins/std/syscalls/syscall_32.tbl
+++ b/compel/arch/x86/plugins/std/syscalls/syscall_32.tbl
@@ -96,6 +96,7 @@ __NR_seccomp		354		sys_seccomp		(unsigned int op, unsigned int flags, const char
 __NR_memfd_create	356		sys_memfd_create	(const char *name, unsigned int flags)
 __NR_userfaultfd	374		sys_userfaultfd		(int flags)
 __NR_ppoll		309		sys_ppoll		(struct pollfd *fds, unsigned int nfds, const struct timespec *tmo, const sigset_t *sigmask, size_t sigsetsize)
+__NR_move_mount		429		sys_move_mount		(int from_dfd, const char *from_pathname, int to_dfd, const char *to_pathname, int flags)
 __NR_fsopen		430		sys_fsopen		(char *fsname, unsigned int flags)
 __NR_fsconfig		431		sys_fsconfig		(int fd, unsigned int cmd, const char *key, const char *value, int aux)
 __NR_fsmount		432		sys_fsmount		(int fd, unsigned int flags, unsigned int attr_flags)
diff --git a/compel/arch/x86/plugins/std/syscalls/syscall_64.tbl b/compel/arch/x86/plugins/std/syscalls/syscall_64.tbl
index 2dfcc6eee..4c9461473 100644
--- a/compel/arch/x86/plugins/std/syscalls/syscall_64.tbl
+++ b/compel/arch/x86/plugins/std/syscalls/syscall_64.tbl
@@ -107,6 +107,7 @@ __NR_kcmp			312		sys_kcmp		(pid_t pid1, pid_t pid2, int type, unsigned long idx1
 __NR_memfd_create		319		sys_memfd_create	(const char *name, unsigned int flags)
 __NR_userfaultfd		323		sys_userfaultfd		(int flags)
 __NR_ppoll			271		sys_ppoll		(struct pollfd *fds, unsigned int nfds, const struct timespec *tmo, const sigset_t *sigmask, size_t sigsetsize)
+__NR_move_mount			429		sys_move_mount		(int from_dfd, const char *from_pathname, int to_dfd, const char *to_pathname, int flags)
 __NR_fsopen			430		sys_fsopen		(char *fsname, unsigned int flags)
 __NR_fsconfig			431		sys_fsconfig		(int fd, unsigned int cmd, const char *key, const char *value, int aux)
 __NR_fsmount			432		sys_fsmount		(int fd, unsigned int flags, unsigned int attr_flags)
diff --git a/criu/cr-check.c b/criu/cr-check.c
index ced084df2..10d433650 100644
--- a/criu/cr-check.c
+++ b/criu/cr-check.c
@@ -1394,6 +1394,14 @@ static int check_sockopt_buf_lock(void)
 	return 0;
 }
 
+static int check_move_mount_set_group(void)
+{
+	if (!kdat.has_move_mount_set_group)
+		return -1;
+
+	return 0;
+}
+
 static int (*chk_feature)(void);
 
 /*
@@ -1514,6 +1522,7 @@ int cr_check(void)
 		ret |= check_network_lock_nftables();
 		ret |= check_sockopt_buf_lock();
 		ret |= check_memfd_hugetlb();
+		ret |= check_move_mount_set_group();
 	}
 
 	/*
@@ -1628,6 +1637,7 @@ static struct feature_list feature_list[] = {
 	{ "network_lock_nftables", check_network_lock_nftables },
 	{ "sockopt_buf_lock", check_sockopt_buf_lock },
 	{ "memfd_hugetlb", check_memfd_hugetlb },
+	{ "move_mount_set_group", check_move_mount_set_group },
 	{ NULL, NULL },
 };
 
diff --git a/criu/include/kerndat.h b/criu/include/kerndat.h
index 25825ee51..f6e3b6133 100644
--- a/criu/include/kerndat.h
+++ b/criu/include/kerndat.h
@@ -78,6 +78,7 @@ struct kerndat_s {
 	bool has_nftables_concat;
 	bool has_sockopt_buf_lock;
 	dev_t hugetlb_dev[HUGETLB_MAX];
+	bool has_move_mount_set_group;
 };
 
 extern struct kerndat_s kdat;
diff --git a/criu/include/mount-v2.h b/criu/include/mount-v2.h
new file mode 100644
index 000000000..8a4e46b1a
--- /dev/null
+++ b/criu/include/mount-v2.h
@@ -0,0 +1,24 @@
+#ifndef __CR_MOUNT_V2_H__
+#define __CR_MOUNT_V2_H__
+
+#include "linux/mount.h"
+
+#include <compel/plugins/std/syscall-codes.h>
+
+#ifndef MOVE_MOUNT_SET_GROUP
+#define MOVE_MOUNT_SET_GROUP 0x00000100 /* Set sharing group instead */
+#endif
+#ifndef MOVE_MOUNT_F_EMPTY_PATH
+#define MOVE_MOUNT_F_EMPTY_PATH 0x00000004 /* Empty from path permitted */
+#endif
+#ifndef MOVE_MOUNT_T_EMPTY_PATH
+#define MOVE_MOUNT_T_EMPTY_PATH 0x00000040 /* Empty to path permitted */
+#endif
+
+static inline int sys_move_mount(int from_dirfd, const char *from_pathname, int to_dirfd, const char *to_pathname,
+				 unsigned int flags)
+{
+	return syscall(__NR_move_mount, from_dirfd, from_pathname, to_dirfd, to_pathname, flags);
+}
+
+#endif /* __CR_MOUNT_V2_H__ */
diff --git a/criu/kerndat.c b/criu/kerndat.c
index da1fb5511..5e49fc116 100644
--- a/criu/kerndat.c
+++ b/criu/kerndat.c
@@ -14,6 +14,7 @@
 #include <sys/prctl.h>
 #include <sys/inotify.h>
 #include <sched.h>
+#include <sys/mount.h>
 
 #if defined(CONFIG_HAS_NFTABLES_LIB_API_0) || defined(CONFIG_HAS_NFTABLES_LIB_API_1)
 #include <nftables/libnftables.h>
@@ -46,6 +47,7 @@
 #include "kcmp.h"
 #include "sched.h"
 #include "memfd.h"
+#include "mount-v2.h"
 
 struct kerndat_s kdat = {};
 
@@ -932,6 +934,69 @@ err:
 	return exit_code;
 }
 
+static int kerndat_has_move_mount_set_group(void)
+{
+	char tmpdir[] = "/tmp/.criu.move_mount_set_group.XXXXXX";
+	char subdir[64];
+	int exit_code = -1;
+
+	if (mkdtemp(tmpdir) == NULL) {
+		pr_perror("Fail to make dir %s", tmpdir);
+		return -1;
+	}
+
+	if (mount("criu.move_mount_set_group", tmpdir, "tmpfs", 0, NULL)) {
+		pr_perror("Fail to mount tmfps to %s", tmpdir);
+		rmdir(tmpdir);
+		return -1;
+	}
+
+	if (mount(NULL, tmpdir, NULL, MS_PRIVATE, NULL)) {
+		pr_perror("Fail to make %s private", tmpdir);
+		goto out;
+	}
+
+	if (snprintf(subdir, sizeof(subdir), "%s/subdir", tmpdir) >= sizeof(subdir)) {
+		pr_err("Fail to snprintf subdir\n");
+		goto out;
+	}
+
+	if (mkdir(subdir, 0700)) {
+		pr_perror("Fail to make dir %s", subdir);
+		goto out;
+	}
+
+	if (mount(subdir, subdir, NULL, MS_BIND, NULL)) {
+		pr_perror("Fail to make bind-mount %s", subdir);
+		goto out;
+	}
+
+	if (mount(NULL, tmpdir, NULL, MS_SHARED, NULL)) {
+		pr_perror("Fail to make %s private", tmpdir);
+		goto out;
+	}
+
+	if (sys_move_mount(AT_FDCWD, tmpdir, AT_FDCWD, subdir, MOVE_MOUNT_SET_GROUP)) {
+		if (errno == EINVAL || errno == ENOSYS) {
+			pr_debug("No MOVE_MOUNT_SET_GROUP kernel feature\n");
+			kdat.has_move_mount_set_group = false;
+			exit_code = 0;
+			goto out;
+		}
+		pr_perror("Fail to MOVE_MOUNT_SET_GROUP");
+		goto out;
+	}
+
+	kdat.has_move_mount_set_group = true;
+	exit_code = 0;
+out:
+	if (umount2(tmpdir, MNT_DETACH))
+		pr_warn("Fail to umount2 %s: %m\n", tmpdir);
+	if (rmdir(tmpdir))
+		pr_warn("Fail to rmdir %s: %m\n", tmpdir);
+	return exit_code;
+}
+
 #define KERNDAT_CACHE_FILE     KDAT_RUNDIR "/criu.kdat"
 #define KERNDAT_CACHE_FILE_TMP KDAT_RUNDIR "/.criu.kdat"
 
@@ -1517,6 +1582,10 @@ int kerndat_init(void)
 		pr_err("kerndat_sockopt_buf_lock failed when initializing kerndat.\n");
 		ret = -1;
 	}
+	if (!ret && kerndat_has_move_mount_set_group()) {
+		pr_err("kerndat_has_move_mount_set_group failed when initializing kerndat.\n");
+		ret = -1;
+	}
 
 	kerndat_lsm();
 	kerndat_mmap_min_addr();
-- 
2.35.1

